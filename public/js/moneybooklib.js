// Generated by CoffeeScript 1.4.0
(function() {
  var Ben, Brain, Event, Line, Payr, Person;

  window.Brain = Brain = (function() {

    function Brain(event) {
      this.event = event;
    }

    Brain.prototype.clear = function() {
      var ben, line, payr, person, _fn, _fn1, _fn2, _fn3, _fn4, _fn5, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _len7, _len8, _m, _n, _o, _p, _q, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8;
      _ref = this.event.people;
      _fn = function(person) {
        return person.balance = 0;
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        person = _ref[_i];
        _fn(person);
      }
      _ref1 = this.event.people;
      _fn1 = function(person) {
        return person.given = 0;
      };
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        person = _ref1[_j];
        _fn1(person);
      }
      _ref2 = this.event.people;
      _fn2 = function(person) {
        return person.spent = 0;
      };
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        person = _ref2[_k];
        _fn2(person);
      }
      _ref3 = this.event.lines;
      for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
        line = _ref3[_l];
        _ref4 = line.bens;
        _fn3 = function(ben) {
          return ben.owes = 0;
        };
        for (_m = 0, _len4 = _ref4.length; _m < _len4; _m++) {
          ben = _ref4[_m];
          _fn3(ben);
        }
      }
      _ref5 = this.event.lines;
      for (_n = 0, _len5 = _ref5.length; _n < _len5; _n++) {
        line = _ref5[_n];
        _ref6 = line.bens;
        _fn4 = function(ben) {
          return ben.balance = 0;
        };
        for (_o = 0, _len6 = _ref6.length; _o < _len6; _o++) {
          ben = _ref6[_o];
          _fn4(ben);
        }
      }
      _ref7 = this.event.lines;
      for (_p = 0, _len7 = _ref7.length; _p < _len7; _p++) {
        line = _ref7[_p];
        _ref8 = line.payrs;
        _fn5 = function(payr) {
          return payr.balance = 0;
        };
        for (_q = 0, _len8 = _ref8.length; _q < _len8; _q++) {
          payr = _ref8[_q];
          _fn5(payr);
        }
      }
      return this.event.days = {};
    };

    Brain.prototype.computeBen = function(ben) {
      if (((ben.amount != null) && ben.offset !== 0) || ((ben.amount != null) && ben.multiply !== 1)) {
        return alert("beneficiary '" + ben.person.name + " with amount " + ben.amount + " is inconsistent");
      }
    };

    Brain.prototype.computeLine = function(line) {
      var amountForEachOne, amountToDivide, ben, divideAmongOthers, percentage, person, totalAmount, totalFixedAmount, totalMultiply, totalOffset, _fn, _fn1, _fn2, _fn3, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3, _ref4, _results,
        _this = this;
      totalAmount = line.computeTotalAmount();
      totalFixedAmount = line.computeTotalFixedAmount();
      if (line.shareMissing) {
        percentage = totalAmount / totalFixedAmount;
        _ref = line.bens;
        _fn = function() {
          return ben.amount *= percentage;
        };
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          ben = _ref[_i];
          _fn();
        }
      }
      totalFixedAmount = line.computeTotalFixedAmount();
      totalOffset = line.computeTotalOffset();
      amountToDivide = totalAmount - totalFixedAmount - totalOffset;
      divideAmongOthers = true;
      if (totalFixedAmount > totalAmount + 0.1) {
        alert("error on line " + line.desc + ": total fixed amount (" + totalFixedAmount + ") is greater that total amount (" + totalAmount + ")");
      } else if (Math.abs(totalFixedAmount - totalAmount) < 0.1 || line.preventDivideAmongOthers) {
        divideAmongOthers = false;
      }
      _ref1 = line.bens;
      _fn1 = function() {
        return _this.computeBen(ben);
      };
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        ben = _ref1[_j];
        _fn1();
      }
      if (divideAmongOthers) {
        _ref2 = line.bens;
        _fn2 = function() {
          if (ben.isEmpty()) {
            return divideAmongOthers = false;
          }
        };
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          ben = _ref2[_k];
          _fn2();
        }
      }
      if (divideAmongOthers) {
        _ref3 = line.group;
        _fn3 = function() {
          if (!line.personIsBen(person)) {
            return line.bens.push(new Ben(person));
          }
        };
        for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
          person = _ref3[_l];
          _fn3();
        }
      }
      totalMultiply = line.computeTotalMultiply();
      amountForEachOne = amountToDivide / totalMultiply;
      _ref4 = line.bens;
      _results = [];
      for (_m = 0, _len4 = _ref4.length; _m < _len4; _m++) {
        ben = _ref4[_m];
        _results.push((function(ben) {
          if (ben.amount != null) {
            return ben.owes = ben.amount;
          } else {
            return ben.owes = amountForEachOne * ben.multiply + ben.offset;
          }
        })(ben));
      }
      return _results;
    };

    Brain.prototype.savePayrToDate = function(date, person, amount) {
      var _base, _ref;
      if ((_ref = (_base = this.event.days)[date]) == null) {
        _base[date] = {
          today: {},
          todayGiven: {},
          todaySpent: {},
          balance: {},
          spent: {},
          given: {}
        };
      }
      if (!(this.event.days[date].today[person.name] != null)) {
        this.event.days[date].today[person.name] = 0;
        this.event.days[date].todayGiven[person.name] = 0;
        this.event.days[date].todaySpent[person.name] = 0;
      }
      this.event.days[date].today[person.name] += roundNumber(amount, 2);
      this.event.days[date].todayGiven[person.name] += roundNumber(amount, 2);
      this.event.days[date].balance[person.name] = person.balance;
      this.event.days[date].spent[person.name] = person.spent;
      return this.event.days[date].given[person.name] = person.given;
    };

    Brain.prototype.saveBenToDate = function(date, person, owes) {
      var _base, _ref;
      if ((_ref = (_base = this.event.days)[date]) == null) {
        _base[date] = {
          today: {},
          todayGiven: {},
          todaySpent: {},
          balance: {},
          spent: {},
          given: {}
        };
      }
      if (!(this.event.days[date].today[person.name] != null)) {
        this.event.days[date].today[person.name] = 0;
        this.event.days[date].todayGiven[person.name] = 0;
        this.event.days[date].todaySpent[person.name] = 0;
      }
      this.event.days[date].today[person.name] -= roundNumber(owes, 2);
      this.event.days[date].todaySpent[person.name] += roundNumber(owes, 2);
      this.event.days[date].balance[person.name] = person.balance;
      this.event.days[date].spent[person.name] = person.spent;
      return this.event.days[date].given[person.name] = person.given;
    };

    Brain.prototype.compute = function() {
      var line, _i, _len, _ref, _results,
        _this = this;
      _ref = this.event.lines;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        _results.push((function(line) {
          var ben, payr, _fn, _j, _k, _len1, _len2, _ref1, _ref2, _results1;
          if (line.isComment || line.isCommand) {
            return;
          }
          _this.computeLine(line);
          _ref1 = line.payrs;
          _fn = function(payr) {
            if (line.reverse === false) {
              payr.person.balance += roundNumber(payr.amount, 2);
              payr.person.given += roundNumber(payr.amount, 2);
            } else {
              payr.person.balance -= roundNumber(payr.amount, 2);
            }
            payr.balance = payr.person.balance;
            if (line.date !== null) {
              return _this.savePayrToDate(line.date, payr.person, payr.amount);
            }
          };
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            payr = _ref1[_j];
            _fn(payr);
          }
          _ref2 = line.bens;
          _results1 = [];
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            ben = _ref2[_k];
            _results1.push((function(ben) {
              if (line.reverse === false) {
                ben.person.balance -= roundNumber(ben.owes, 2);
                if (line.type !== 'debt' && line.type !== 'payback') {
                  ben.person.spent += roundNumber(ben.owes, 2);
                }
              } else {
                ben.person.balance += roundNumber(ben.owes, 2);
              }
              ben.balance = ben.person.balance;
              if (line.date !== null) {
                return _this.saveBenToDate(line.date, ben.person, ben.owes);
              }
            })(ben));
          }
          return _results1;
        })(line));
      }
      return _results;
    };

    return Brain;

  })();

  window.Event = Event = (function() {

    function Event(title) {
      this.title = title;
      this.people = [];
      this.lines = [];
      this.days = {};
    }

    return Event;

  })();

  window.Person = Person = (function() {

    function Person(name) {
      this.name = name;
      this.balance = 0;
      this.spent = 0;
      this.given = 0;
    }

    return Person;

  })();

  window.Line = Line = (function() {

    function Line(desc) {
      this.desc = desc;
      this.currency = 1;
      this.bens = [];
      this.payrs = [];
      this.date = null;
      this.group = null;
      this.string = "";
      this.isComment = false;
      this.isCommand = false;
      this.shareMissing = false;
      this.reverse = false;
      this.preventDivideAmongOthers = false;
      this.type = 'split';
    }

    Line.prototype.computeTotalAmount = function() {
      var payr, tot, _fn, _i, _len, _ref;
      tot = 0;
      _ref = this.payrs;
      _fn = function(payr) {
        return tot += payr.amount;
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        payr = _ref[_i];
        _fn(payr);
      }
      return tot;
    };

    Line.prototype.computeTotalFixedAmount = function() {
      var ben, tot, _fn, _i, _len, _ref;
      tot = 0;
      _ref = this.bens;
      _fn = function(ben) {
        return tot += ben.amount;
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ben = _ref[_i];
        _fn(ben);
      }
      return tot;
    };

    Line.prototype.computeTotalOffset = function() {
      var ben, tot, _fn, _i, _len, _ref;
      tot = 0;
      _ref = this.bens;
      _fn = function(ben) {
        return tot += ben.offset;
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ben = _ref[_i];
        _fn(ben);
      }
      return tot;
    };

    Line.prototype.computeTotalMultiply = function() {
      var ben, tot, _fn, _i, _len, _ref;
      tot = 0;
      _ref = this.bens;
      _fn = function(ben) {
        if (ben.amount === null) {
          return tot += ben.multiply;
        }
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ben = _ref[_i];
        _fn(ben);
      }
      return tot;
    };

    Line.prototype.personIsBen = function(person) {
      var ben, out, _fn, _i, _len, _ref;
      out = false;
      _ref = this.bens;
      _fn = function() {
        if (ben.person === person) {
          return out = true;
        }
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ben = _ref[_i];
        _fn();
      }
      return out;
    };

    Line.prototype.getPayrByPerson = function(person) {
      var out, payr, _fn, _i, _len, _ref;
      out = null;
      _ref = this.payrs;
      _fn = function() {
        if (payr.person === person) {
          return out = payr;
        }
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        payr = _ref[_i];
        _fn();
      }
      return out;
    };

    Line.prototype.getBenByPerson = function(person) {
      var ben, out, _fn, _i, _len, _ref;
      out = null;
      _ref = this.bens;
      _fn = function() {
        if (ben.person === person) {
          return out = ben;
        }
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ben = _ref[_i];
        _fn();
      }
      return out;
    };

    return Line;

  })();

  window.Ben = Ben = (function() {

    function Ben(person) {
      this.person = person;
      this.amount = null;
      this.owes = 0;
      this.offset = 0;
      this.multiply = 1;
      this.balance = null;
    }

    Ben.prototype.isEmpty = function() {
      return this.amount === null && this.offset === 0 && this.multiply === 1;
    };

    return Ben;

  })();

  window.Payr = Payr = (function() {

    function Payr(person) {
      this.person = person;
      this.amount = 0;
      this.balance = null;
    }

    return Payr;

  })();

}).call(this);
